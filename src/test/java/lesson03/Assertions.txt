/*
1. assertEquals
assertEquals , beklenen sonucu gerçek sonuç ile karşılaştırmak için kullanılır. Beklenen sonuç ile gerçek sonuç eşit değil ise gerçekleştirilen test senaryosu sonucunda assertionError hatası fırlatır.
2. assertTrue
assertTrue, beklenen bir sonucun true olduğunun kabul edilmesi gerektiği zaman kullanılır. Parametre olarak iki değer alır. İlk parametre de bir mesaj gönderilir ikinci parametrede ise gönderilen mesajın doğruluğu için koşul belirlenir.
3. assertFalse
assertFalse, beklenen bir sonucun false olması durumunda kullanılır. İki parametre alır. Parametrelerden biri mesajdır diğeri ise koşuldur. assertFalse ile koşul yerine getirilmez ise assertionError hatası fırlatır.
4.assertNull
assertNull, beklenen bir sonucun null olup olmadığı kontrol edilmesi için kullanılır. Bir nesneyi parametre olarak alır ve nesne null değil ise assertionError hatası fırlatır.
5.assertNotNull
assertNotNull, beklenen bir sonucun null olmadığını doğrulamak için kullanılır. Bir nesneyi parametre olarak alır ve nesne null ise assertionError hatası fırlatır.
6.assertSame
assertSame, parametre olarak verilen iki nesnenin aynı nesneye karşılık gelip gelmediğini kontrol eder. Eğer nesneler aynı nesneyi karşılamıyor ise assertionError hatası fırlatır.
7.assertNotSame
assertNotSame, parametre olarak verilen iki nesnenin birbirine eşit olmadığı kontrolünü eder. Eğer aynı nesneye karşılık geliyor ise assertionError hatası fırlatır.
8.assertArrayEquals
assertArrayEquals, parametre olarak verilen iki dizinin eşit olup olmadığını kontrol eder. Her iki dizi içinde null değeri var ise bunlar eşit olarak kabul edilir. Eğer eşit değil ise assertionError hatası fırlatır.
*/

Test malumu ilam dır. Yani bilineni gösterme...

/*
dogru oldugunu biliyorsak ==>Assert.assertTrue
yanlis oldugunu biliyorsak ==>Assert.assertFalse
yaparak karar veriyoruz
*/

/*
===equals ile karar verecek isek===
dogru ise ==>Assert.assertEquals
yanlis ise ==>Assert.assertNotEquals
yaparak karar veriyoruz
 */


   // En çok kullanılan ASSERTION methodları:
    // 1) Assert.assertTrue(koşul) ---> Doğru olmasını istediğimiz koşullarda bunu kullanıyoruz (sonucun doğru olmasını bekliyorsak)
    // 2) Assert.assertFalse(koşul) ---> Bir şartın yanlış olmasını bekliyorsak bunu kullanırız (sonucun false olmasını bekliyorsak)
    // 3) Assert.assertEqual(expected, actual) ---> İki değer verip bu iki değerin birbirine eşit olmasını bekliyorsak
    // NOT: Hangi methodu seçeceğimize bize verilen değerlere göre değil, test senaryosunun neyi öngördüğüne göre karar veririz.

    // assertTrue (TRUE) ---> PASSED
    // assertFalse (FALSE) ---> PASSED
    // assertTrue (FALSE) ---> FAILED
    // assertFalse (TRUE) ---> FAILED
    // assertEquals (EQUALS) ---> PASSED
    // assertEquals (NOT EQUALS) ---> FAILED

bir nevi yanlis oldugunu dogruluyoruz

Negative test seneryosu düşünün sisteme giriş yapamaması gerekiyor ve fail alırsak bug olacak
ama bug değil bu sisteme giriş yapmamasını test ediyoruz o yüzden pass olması lazım

text-case lerede bakarsaniz “oldugunu test edin der. ” Bunu derken ki amac her turlu yanlisa karsi hata bulmaktir.
Simple case oldugu gibi complex case lerde vardir

O yüzden fail seçiyoruz